import React from "react";
import {
  CircularProgress,
  Box,
  TextField,
  IconButton,
  InputAdornment,
} from "@mui/material";
import FileCopyIcon from "@mui/icons-material/FileCopy";
import { useUserConversations } from "../../contexts/UserConversationsContext";

interface GPTResponseTextProps {
  GPTResponse: string;
  isWaiting: boolean;
}

const RenderConversationMessage: React.FC<{ message: any }> = ({ message }) => {
  const prefix = message.role === "system" ? "GPT: " : "You: ";
  return (
    <div>
      <span>{prefix}</span>
      {message.content}
    </div>
  );
};

const RenderGPTResponse: React.FC<{ GPTResponse: string }> = ({
  GPTResponse,
}) => (
  <TextField
    multiline
    fullWidth
    value={GPTResponse}
    inputProps={{
      readOnly: true,
    }}
    InputProps={{
      endAdornment: (
        <InputAdornment position="end">
          <IconButton
            onClick={() => navigator.clipboard.writeText(GPTResponse)}
          >
            <FileCopyIcon />
          </IconButton>
        </InputAdornment>
      ),
    }}
  />
);

const GPTResponseText: React.FC<GPTResponseTextProps> = ({
  GPTResponse,
  isWaiting,
}) => {
  const conversationMessages = useUserConversations()?.conversationMessages;

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        m: "2rem auto",
        width: "95%",
      }}
    >
      {isWaiting ? (
        <CircularProgress />
      ) : (
        <>
          {conversationMessages &&
            conversationMessages.length > 0 &&
            conversationMessages.map((message, index) => (
              <RenderConversationMessage key={index} message={message} />
            ))}
          {GPTResponse &&
            (GPTResponse.startsWith("https://") ? (
              <img
                src={GPTResponse}
                alt="Generated by GPT"
                style={{ width: "100%", height: "auto" }}
              />
            ) : (
              <RenderGPTResponse GPTResponse={GPTResponse} />
            ))}
        </>
      )}
    </Box>
  );
};

export default GPTResponseText;
